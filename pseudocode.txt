processes are:
	-ready to use a CPU
	-actively using a CPU
	-blocked on I/O
	-NOTE: by chance, no processes will be in queue, then exit program

/* PARAMETERS */

# of processes: by default
int n=12

# of cpu's: by default
int m=4


/* ALGORITHMS TO IMPLEMENT */

SJF_No_Preemption
SJF_Preemptive
RR
Preemptive_Priority
	-priority levels 0-4
	-same priority handled FCFS
	-higher priority entering can preempt
	-every elapsed 1200ms, lower priority processes increase by 1


/* TYPES OF PROCESSES TO HANDLE */

P_int=80% interactive processes
	-burst times 20-200ms
	-interactive time 1000-4500ms
	-returned to ready queue

P_cpu=20% cpu bound processes
	-burst times 200-3000ms
	-b=8 such bursts before terminating
	-between bursts blocked on I/O, 1200-3200ms

/*	   REQUIRED OUTPUT		*/
	-Process entry (display the process type, process ID, required CPU burst time, and priority, if applicable)
	-Context switch (display the two before/after process IDs involved); display at the beginning of the context switch)
	-Process CPU burst completion (display the process ID, its turnaround time, and its total wait time)
	-Process termination (display the process ID, its turnaround time, and its total wait time)
	-Aging event (display the process ID and the new priority)

	Turnaround time: min ___ ms; avg ___ ms; max ___ ms
	Total wait time: min ___ ms; avg ___ ms; max ___ ms
	Average CPU utilization: ___%
	Average CPU utilization per process:
	process ID: ___%
	process ID: ___%
	...
	process ID: ___%

	CPU Utilization = burst time/turnaround time * 100

/************** PSEUDOCODE ***************/

main function:
	int n for processes
	int m for cpu's

	read in arguments
	if arguments for # of processes exists
		n=args[0]
	if argument for # of cpu's exists
		m=args[1]

	call SJF-No Preemption function
	call SJF-Premption function
	call RR function
	call Preemptive-Priority function



in each function: //something along these lines
	create a ready queue
	create processes
		-80% need to be Interactive Processes
		-20% CPU-Bound Processes
	push each process to the ready queue

	while(queue.size>0){
		increment time
		while( cpu's available){
			execute a process
		}
	}